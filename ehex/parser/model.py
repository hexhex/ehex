#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.

from __future__ import print_function, division, absolute_import, unicode_literals

from tatsu.objectmodel import Node
from tatsu.semantics import ModelBuilderSemantics


class ModelBase(Node):
    pass


class EHEXModelBuilderSemantics(ModelBuilderSemantics):
    def __init__(self, context=None, types=None):
        types = [
            t
            for t in globals().values()
            if type(t) is type and issubclass(t, ModelBase)
        ] + (types or [])
        super(EHEXModelBuilderSemantics, self).__init__(context=context, types=types)


class Conjunction(ModelBase):
    pass


class Term(ModelBase):
    pass


class Modal(ModelBase):
    pass


class Program(ModelBase):
    query = None
    statements = None


class Constraint(ModelBase):
    body = None


class Rule(ModelBase):
    body = None
    head = None


class WeakConstraint(ModelBase):
    body = None
    weight_at_level = None


class RuleBody(Conjunction):
    literals = None


class Disjunction(ModelBase):
    literals = None


class ChoiceRelation(ModelBase):
    choices = None
    left = None
    left_op = None
    right = None
    right_op = None


class ChoiceElement(ModelBase):
    choice = None
    literals = None


class DefaultNegation(ModelBase):
    literal = None
    op = None


class AggregateRelation(ModelBase):
    aggregate = None
    left = None
    left_op = None
    right = None
    right_op = None


class AggregateFunction(ModelBase):
    elements = None
    symbol = None


class AggregateElement(ModelBase):
    literals = None
    terms = None


class Optimize(ModelBase):
    elements = None
    function = None


class OptimizeElement(ModelBase):
    literals = None
    weight_at_level = None


class Query(ModelBase):
    literal = None


class Atom(ModelBase):
    arguments = None
    symbol = None


class StrongNegation(ModelBase):
    atom = None
    op = None


class WeighAtLevel(ModelBase):
    level = None
    terms = None
    weight = None


class AdditiveTerm(Term):
    pass


class MultiplicativeTerm(Term):
    pass


class Interval(ModelBase):
    left = None
    right = None


class FunctionalTerm(Term):
    arguments = None
    symbol = None


class SubTerm(Term):
    pass


class NegativeTerm(Term):
    pass


class ConstantTerm(Term):
    pass


class VariableTerm(Term):
    pass


class BinaryRelation(ModelBase):
    left = None
    op = None
    right = None


class KModal(Modal):
    literal = None
    op = None


class MModal(Modal):
    literal = None
    op = None
