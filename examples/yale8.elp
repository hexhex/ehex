% Yale Shooting Problem #8

horizon(8).
step(0..8).
action_step(0..7).
isnext(T, S) ← T = S + 1, action_step(S).

fluent(aimed).
fluent(alive).
fluent(cocked).
fluent(loaded).
fluent(wounded).
fluent(is_impossible).
action(aim).
action(cock).
action(load).
action(fire).


% Translated domain description

holds(aimed, T) ←
    occurs(aim, S),
    isnext(T, S).

¬holds(aimed, T) ←
    occurs(cock, S),
    isnext(T, S).

¬holds(aimed, T) ←
    occurs(load, S),
    isnext(T, S).

¬holds(aimed, T) ←
    occurs(fire, S),
    isnext(T, S).

holds(cocked, T) ←
    occurs(cock, S),
    isnext(T, S).

¬holds(cocked, T) ←
    occurs(fire, S),
    isnext(T, S).

holds(wounded, T) ←
    occurs(fire, S),
    holds(loaded, S),
    -holds(wounded, S),
    holds(alive, S),
    holds(aimed, S),
    holds(cocked, S),
    isnext(T, S).

¬holds(alive, T) ←
    occurs(fire, S),
    holds(loaded, S),
    holds(wounded, S),
    holds(alive, S),
    holds(aimed, S),
    holds(cocked, S),
    isnext(T, S).

¬holds(loaded, T) ←
    occurs(fire, S),
    isnext(T, S).

holds(loaded, T) :-
    occurs(load, S),
    isnext(T, S).

holds(is_impossible, T) :-
    occurs(load, S),
    holds(loaded, S),
    isnext(T, S).

holds(is_impossible, T) :-
    occurs(load, S),
    holds(cocked, S),
    isnext(T, S).

holds(is_impossible, T) :-
    occurs(cock, S),
    holds(cocked, S),
    isnext(T, S).

holds(is_impossible, T) :-
    occurs(fire, S),
    ¬holds(cocked, S),
    isnext(T, S).


% Inertia and awareness axioms

holds(F, T) ←
    holds(F, S),
    not ¬holds(F, T),
    isnext(T, S).

¬holds(F, T) :- 
    ¬holds(F, S),
    not holds(F, T),
    isnext(T, S).

holds(F, 0) :- not ¬holds(F, 0), fluent(F).

¬holds(F, 0) :- not holds(F, 0), fluent(F).


% Initial condition

holds(alive, 0).
¬holds(aimed, 0).
¬holds(cocked, 0).
¬holds(loaded, 0).
¬holds(wounded, 0).
¬holds(is_impossible, 0).


% Goal

goal ←
    ¬holds(alive, N),
    ¬holds(is_impossible, N),
    horizon(N).


% Conformant planning module

occurs(A, S) ←
    M occurs(A, S),
    action(A),
    action_step(S).

←
    occurs(A1 , S),
    occurs(A2 , S),
    A1 != A2.

← goal, not K goal.
← not M goal.
